ex3

Part 2

$ time ./RaceCondT
Inspec: actual value of V = -1219603
Inspec: actual value of V = -2339494
Inspec: actual value of V = -2493887
Inspec: actual value of V = -2505536
Inspec: actual value of V = -2431675
Inspec: actual value of V = -2166539
Inspec: actual value of V = -639036
Inspec: actual value of V = -515148
Inspec: actual value of V = -515828
Inspec: actual value of V = -464869
Inspec: actual value of V = -412100
Inspec: actual value of V = -191596
Inspec: actual value of V = -173234
Inspec: actual value of V = -79110
Inspec: actual value of V = 244
Inspec: actual value of V = 104135
Inspec: actual value of V = -149789
Inspec: actual value of V = -1362994
Inspec: actual value of V = -2495205
Inspec: actual value of V = -1936776
Inspec: actual value of V = -1099050
Inspec: actual value of V = 50731
Inspec: actual value of V = 1247632
Inspec: actual value of V = 2031436
Inspec: actual value of V = 3193652
-------> inc end (V = 3777846)
-------> dec end (V = 100)
-------> FINAL VALUE: V = 100


real    0m5.179s
user    0m10.269s
sys     0m0.020s


Part 4

$ time ./RaceCondTB
Inspec: actual value of V = 9105731
Inspec: actual value of V = 18539395
-------> inc end (V = 20000100)
-------> dec end (V = 100)
-------> FINAL VALUE: V = 100


real    0m0.502s
user    0m0.920s
sys     0m0.012s


Part 5

If the critical section only protects the increment instruction, the execution is much slower because of the amount of switches of the key.
If the critical section protects the whole for, only 2 critical sections are executed. Therefore the whole addition is performed as a block, as the substraction.
The sync for Figure-3 is better because... reasons?

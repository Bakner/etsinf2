Lab7 - answers

### formatos.s ###

The value of $f3 is 2.52 in single precision, but the real format is double. 8.75 in double takes up 2 registers, one is 0x00000000 and the other 0x40218000. 0x40218000 read as Single precision floating point number is 2.52

0x10000000 and 0x00000000 = 0
0x7fc00000 = +INF
0xffc00000 = -INF

li.d $f2, 8.75 -> 8.75 = 0x4021800000000000
			### Build the lower half of the number
			############ 0x00000000
			ori $1,$0,0 		# Load 0 to $1
			mtc1 $1,$2			# Move $1 to $f2
			### Build the upper half of the number
			############ 0x40218000
			lui $1, 16417 		# Load 16417 to the upper half of $1
			ori $1, $1, -32768	# Load -32768 to the lower half of $1
			mtc1 $1, $3 		# Move $1 to $f3
			
78.325f = 0x429ca666
78.325  = 0x405394cccccccccd

NaN = 0x7fffffff (for double extend f)

An instruction for floating point addition immediate would need more than 32bits to allocate a number AND the instruction code.



### promedio.s ###

cvt.s.w # converts a float to a word (integer)

Variable	Decimal		IEEE754
media_s		2.9			0x4039999a
media_d		2.9			0x4007333340000000

add.s		4
cvt.s.w 	1
div.s 		1
cvt.d.s 	1
TOTAL		7

FLOPS = 7 / .5 * 10^6 = 14e6 = 14MFLOPS



### pi-leibniz.s ###

impar == (LSB==1)

5n + 1 is the number of FP op.

Iterations 	Result
1e3			3.142591476440429700
1e4			3.141692638397216800
1e5			3.141602516174316400
1e6			3.141593456268310500

mov.s could be replaced by two or.s, one or.s and one and.s... etc

Because it can be easily emulated with just one add or or ($0 is wired to 0, so add $dest, $origin, $zero and or $dest, $zero, $origin can be equal to move).

Iterations 	Result (double)
1e3			3.1425916543395434
1e4			3.1416926435905435
1e5			3.1416026534897941
1e6			3.1415936535887932